{"ast":null,"code":"var _jsxFileName = \"/home/joel/Playground/hangman-frontend/src/components/HangmanGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ScoreDisplay } from './ScoreDisplay';\nimport { SwissClock } from './SwissClock';\nimport { HangmanDrawing } from './HangmanDrawing';\nimport { GuessInput } from './GuessInput';\nimport { GameMessage } from './GameMessage';\nimport '../styles/HangmanGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_TRIES = 7;\nexport default function HangmanGame() {\n  _s();\n  const [words, setWords] = useState([]);\n  const [selectedWord, setSelectedWord] = useState('');\n  const [displayedWord, setDisplayedWord] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState([]);\n  const [triesLeft, setTriesLeft] = useState(MAX_TRIES);\n  const [wins, setWins] = useState(0);\n  const [losses, setLosses] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [letter, setLetter] = useState('');\n  const [swissTime, setSwissTime] = useState('');\n  const [winStreak, setWinStreak] = useState(0);\n  const startGame = useCallback((wordArray = words) => {\n    const word = wordArray[Math.floor(Math.random() * wordArray.length)];\n    setSelectedWord(word);\n    setDisplayedWord(Array(word.length).fill('_'));\n    setWrongGuesses([]);\n    setTriesLeft(MAX_TRIES);\n    setGameOver(false);\n    setLetter('');\n  }, [words]);\n  useEffect(() => {\n    fetch('/word_list.txt').then(res => res.text()).then(data => {\n      const wordArray = data.split('\\n').map(w => w.trim().toLowerCase()).filter(Boolean);\n      setWords(wordArray);\n    }).catch(error => console.error(\"Error fetching word list:\", error));\n  }, []);\n  useEffect(() => {\n    if (words.length > 0) {\n      startGame(words);\n    }\n  }, [words, startGame]);\n  useEffect(() => {\n    const interval = setInterval(updateSwissTime, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const updateSwissTime = () => {\n    const options = {\n      timeZone: 'Europe/Zurich',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n    setSwissTime(new Date().toLocaleTimeString('de-CH', options));\n  };\n  const handleGuess = () => {\n    if (gameOver || !letter) return;\n    const l = letter.toLowerCase();\n    setLetter('');\n    if (wrongGuesses.includes(l) || displayedWord.includes(l)) return;\n    if (selectedWord.includes(l)) {\n      const newDisplayed = displayedWord.map((char, i) => selectedWord[i] === l ? l : char);\n      setDisplayedWord(newDisplayed);\n      if (!newDisplayed.includes('_')) {\n        setGameOver(true);\n        setWins(wins + 1);\n        setPoints(points + 10);\n        setWinStreak(winStreak + 1);\n      }\n    } else {\n      const newTries = triesLeft - 1;\n      setWrongGuesses([...wrongGuesses, l]);\n      setTriesLeft(newTries);\n      if (newTries === 0) {\n        setGameOver(true);\n        setLosses(losses + 1);\n        setPoints(Math.max(0, points - 5));\n        setWinStreak(0);\n      }\n    }\n  };\n  const getImageSrc = () => {\n    const level = MAX_TRIES - triesLeft + 1;\n    return `/img/level${level}.png`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hangman-game-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-game\",\n      children: [/*#__PURE__*/_jsxDEV(SwissClock, {\n        swissTime: swissTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n        wins: wins,\n        losses: losses,\n        points: points\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"hangman-game__title\",\n        children: \"Hangman - Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hangman-game__word-display\",\n        children: displayedWord.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n        letter: letter,\n        setLetter: setLetter,\n        handleGuess: handleGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hangman-game__wrong-guesses\",\n        children: [\"Wrong letters: \", wrongGuesses.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(HangmanDrawing, {\n        imageSrc: getImageSrc()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n        gameOver: gameOver,\n        triesLeft: triesLeft,\n        selectedWord: selectedWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hangman-game__restart-btn\",\n        onClick: () => startGame(words),\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(HangmanGame, \"7IchJUQWHuq6aYqAWQNawVlraqQ=\");\n_c = HangmanGame;\nvar _c;\n$RefreshReg$(_c, \"HangmanGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ScoreDisplay","SwissClock","HangmanDrawing","GuessInput","GameMessage","jsxDEV","_jsxDEV","MAX_TRIES","HangmanGame","_s","words","setWords","selectedWord","setSelectedWord","displayedWord","setDisplayedWord","wrongGuesses","setWrongGuesses","triesLeft","setTriesLeft","wins","setWins","losses","setLosses","points","setPoints","gameOver","setGameOver","letter","setLetter","swissTime","setSwissTime","winStreak","setWinStreak","startGame","wordArray","word","Math","floor","random","length","Array","fill","fetch","then","res","text","data","split","map","w","trim","toLowerCase","filter","Boolean","catch","error","console","interval","setInterval","updateSwissTime","clearInterval","options","timeZone","hour","minute","second","hour12","Date","toLocaleTimeString","handleGuess","l","includes","newDisplayed","char","i","newTries","max","getImageSrc","level","className","children","fileName","_jsxFileName","lineNumber","columnNumber","join","imageSrc","onClick","_c","$RefreshReg$"],"sources":["/home/joel/Playground/hangman-frontend/src/components/HangmanGame.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ScoreDisplay } from './ScoreDisplay';\nimport { SwissClock } from './SwissClock';\nimport { HangmanDrawing } from './HangmanDrawing';\nimport { GuessInput } from './GuessInput';\nimport { GameMessage } from './GameMessage';\nimport '../styles/HangmanGame.css';\n\nconst MAX_TRIES = 7;\n\nexport default function HangmanGame() {\n    const [words, setWords] = useState([]);\n    const [selectedWord, setSelectedWord] = useState('');\n    const [displayedWord, setDisplayedWord] = useState([]);\n    const [wrongGuesses, setWrongGuesses] = useState([]);\n    const [triesLeft, setTriesLeft] = useState(MAX_TRIES);\n    const [wins, setWins] = useState(0);\n    const [losses, setLosses] = useState(0);\n    const [points, setPoints] = useState(0);\n    const [gameOver, setGameOver] = useState(false);\n    const [letter, setLetter] = useState('');\n    const [swissTime, setSwissTime] = useState('');\n    const [winStreak, setWinStreak] = useState(0);\n\n    const startGame = useCallback((wordArray = words) => {\n        const word = wordArray[Math.floor(Math.random() * wordArray.length)];\n        setSelectedWord(word);\n        setDisplayedWord(Array(word.length).fill('_'));\n        setWrongGuesses([]);\n        setTriesLeft(MAX_TRIES);\n        setGameOver(false);\n        setLetter('');\n    }, [words]);\n\n    useEffect(() => {\n        fetch('/word_list.txt')\n            .then((res) => res.text())\n            .then((data) => {\n                const wordArray = data.split('\\n').map((w) => w.trim().toLowerCase()).filter(Boolean);\n                setWords(wordArray);\n            })\n            .catch((error) => console.error(\"Error fetching word list:\", error));\n    }, []);\n\n    useEffect(() => {\n        if (words.length > 0) {\n            startGame(words);\n        }\n    }, [words, startGame]);\n\n    useEffect(() => {\n        const interval = setInterval(updateSwissTime, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const updateSwissTime = () => {\n        const options = {\n            timeZone: 'Europe/Zurich',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n        };\n        setSwissTime(new Date().toLocaleTimeString('de-CH', options));\n    };\n\n    const handleGuess = () => {\n        if (gameOver || !letter) return;\n\n        const l = letter.toLowerCase();\n        setLetter('');\n\n        if (wrongGuesses.includes(l) || displayedWord.includes(l)) return;\n\n        if (selectedWord.includes(l)) {\n            const newDisplayed = displayedWord.map((char, i) => (\n                selectedWord[i] === l ? l : char\n            ));\n            setDisplayedWord(newDisplayed);\n\n            if (!newDisplayed.includes('_')) {\n                setGameOver(true);\n                setWins(wins + 1);\n                setPoints(points + 10);\n\n                setWinStreak(winStreak + 1);\n            }\n        } else {\n            const newTries = triesLeft - 1;\n            setWrongGuesses([...wrongGuesses, l]);\n            setTriesLeft(newTries);\n\n            if (newTries === 0) {\n                setGameOver(true);\n                setLosses(losses + 1);\n                setPoints(Math.max(0, points - 5));\n\n                setWinStreak(0);\n            }\n        }\n    };\n\n    const getImageSrc = () => {\n        const level = MAX_TRIES - triesLeft + 1;\n        return `/img/level${level}.png`;\n    };\n\n    return (\n        <div className=\"hangman-game-container\">\n            <div className=\"hangman-game\">\n                <SwissClock swissTime={swissTime} />\n                <ScoreDisplay wins={wins} losses={losses} points={points} />\n                <h1 className=\"hangman-game__title\">Hangman - Game</h1>\n                <div className=\"hangman-game__word-display\">{displayedWord.join(' ')}</div>\n                <GuessInput letter={letter} setLetter={setLetter} handleGuess={handleGuess} />\n                <div className=\"hangman-game__wrong-guesses\">\n                    Wrong letters: {wrongGuesses.join(', ')}\n                </div>\n                <HangmanDrawing imageSrc={getImageSrc()} />\n                <GameMessage gameOver={gameOver} triesLeft={triesLeft} selectedWord={selectedWord} />\n                <button className=\"hangman-game__restart-btn\" onClick={() => startGame(words)}>\n                    Restart\n                </button>\n            </div>\n        </div>\n    );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}