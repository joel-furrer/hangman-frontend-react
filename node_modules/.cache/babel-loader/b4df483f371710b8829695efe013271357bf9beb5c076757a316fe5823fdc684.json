{"ast":null,"code":"var _jsxFileName = \"/home/joel/Playground/hangman-frontend/src/components/HangmanGame.jsx\",\n  _s = $RefreshSig$();\n// src/components/HangmanGame.jsx\nimport React, { useEffect, useState, useCallback } from 'react';\nimport '../styles/HangmanGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_TRIES = 7;\nexport default function HangmanGame() {\n  _s();\n  const [words, setWords] = useState([]);\n  const [selectedWord, setSelectedWord] = useState('');\n  const [displayedWord, setDisplayedWord] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState([]);\n  const [triesLeft, setTriesLeft] = useState(MAX_TRIES);\n  const [wins, setWins] = useState(0);\n  const [losses, setLosses] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [letter, setLetter] = useState('');\n  const [swissTime, setSwissTime] = useState('');\n  const startGame = useCallback((wordArray = words) => {\n    const word = wordArray[Math.floor(Math.random() * wordArray.length)];\n    setSelectedWord(word);\n    setDisplayedWord(Array(word.length).fill('_'));\n    setWrongGuesses([]);\n    setTriesLeft(MAX_TRIES);\n    setGameOver(false);\n    setLetter('');\n  }, [words]);\n  useEffect(() => {\n    fetch('/word_list.txt').then(res => res.text()).then(data => {\n      const wordArray = data.split('\\n').map(w => w.trim().toLowerCase());\n      setWords(wordArray);\n      startGame(wordArray);\n    });\n  }, [startGame]);\n  useEffect(() => {\n    const interval = setInterval(updateSwissTime, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const updateSwissTime = () => {\n    const options = {\n      timeZone: 'Europe/Zurich',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n    setSwissTime(new Date().toLocaleTimeString('de-CH', options));\n  };\n  const handleGuess = () => {\n    if (gameOver || !letter) return;\n    const l = letter.toLowerCase();\n    setLetter('');\n    if (wrongGuesses.includes(l) || displayedWord.includes(l)) return;\n    if (selectedWord.includes(l)) {\n      const newDisplayed = displayedWord.map((char, i) => selectedWord[i] === l ? l : char);\n      setDisplayedWord(newDisplayed);\n      if (!newDisplayed.includes('_')) {\n        setGameOver(true);\n        setWins(wins + 1);\n        setPoints(points + 10);\n      }\n    } else {\n      const newTries = triesLeft - 1;\n      setWrongGuesses([...wrongGuesses, l]);\n      setTriesLeft(newTries);\n      if (newTries === 0) {\n        setGameOver(true);\n        setLosses(losses + 1);\n        setPoints(Math.max(0, points - 5));\n      }\n    }\n  };\n  const getImageSrc = () => {\n    const level = MAX_TRIES - triesLeft + 1;\n    return `/img/level${level}.png`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"clock-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"swiss-time-label\",\n        children: \"Swiss Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"current-time\",\n        children: swissTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"score-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"total-points\",\n        className: \"score-text\",\n        children: [\"Points: \", points]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"win-loose-count\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"win-count\",\n          className: \"score-text\",\n          children: wins\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"loss-count\",\n          className: \"score-text\",\n          children: losses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hangman - Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-display\",\n      children: displayedWord.join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"letter-input\",\n        children: \"Enter a letter:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"letter-input\",\n        maxLength: \"1\",\n        value: letter,\n        onChange: e => setLetter(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-btn\",\n        onClick: handleGuess,\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrong-guesses\",\n      children: [\"Wrong letters: \", wrongGuesses.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-drawing\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: getImageSrc(),\n        alt: `Hangman Level`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: gameOver ? triesLeft === 0 ? `Lost! The word was: ${selectedWord}` : 'You won!' : `Tries left: ${triesLeft}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"restart-btn\",\n      onClick: startGame,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(HangmanGame, \"q2W/aUWXtABRqQNd9N0nrsMUmw0=\");\n_c = HangmanGame;\nvar _c;\n$RefreshReg$(_c, \"HangmanGame\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","jsxDEV","_jsxDEV","MAX_TRIES","HangmanGame","_s","words","setWords","selectedWord","setSelectedWord","displayedWord","setDisplayedWord","wrongGuesses","setWrongGuesses","triesLeft","setTriesLeft","wins","setWins","losses","setLosses","points","setPoints","gameOver","setGameOver","letter","setLetter","swissTime","setSwissTime","startGame","wordArray","word","Math","floor","random","length","Array","fill","fetch","then","res","text","data","split","map","w","trim","toLowerCase","interval","setInterval","updateSwissTime","clearInterval","options","timeZone","hour","minute","second","hour12","Date","toLocaleTimeString","handleGuess","l","includes","newDisplayed","char","i","newTries","max","getImageSrc","level","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","join","htmlFor","type","maxLength","value","onChange","e","target","onClick","src","alt","_c","$RefreshReg$"],"sources":["/home/joel/Playground/hangman-frontend/src/components/HangmanGame.jsx"],"sourcesContent":["// src/components/HangmanGame.jsx\nimport React, { useEffect, useState, useCallback } from 'react';\nimport '../styles/HangmanGame.css';\n\nconst MAX_TRIES = 7;\n\nexport default function HangmanGame() {\n    const [words, setWords] = useState([]);\n    const [selectedWord, setSelectedWord] = useState('');\n    const [displayedWord, setDisplayedWord] = useState([]);\n    const [wrongGuesses, setWrongGuesses] = useState([]);\n    const [triesLeft, setTriesLeft] = useState(MAX_TRIES);\n    const [wins, setWins] = useState(0);\n    const [losses, setLosses] = useState(0);\n    const [points, setPoints] = useState(0);\n    const [gameOver, setGameOver] = useState(false);\n    const [letter, setLetter] = useState('');\n    const [swissTime, setSwissTime] = useState('');\n\n    const startGame = useCallback((wordArray = words) => {\n        const word = wordArray[Math.floor(Math.random() * wordArray.length)];\n        setSelectedWord(word);\n        setDisplayedWord(Array(word.length).fill('_'));\n        setWrongGuesses([]);\n        setTriesLeft(MAX_TRIES);\n        setGameOver(false);\n        setLetter('');\n    }, [words]);\n\n    useEffect(() => {\n        fetch('/word_list.txt')\n            .then(res => res.text())\n            .then(data => {\n                const wordArray = data.split('\\n').map(w => w.trim().toLowerCase());\n                setWords(wordArray);\n                startGame(wordArray);\n            });\n    }, [startGame]);\n\n    useEffect(() => {\n        const interval = setInterval(updateSwissTime, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const updateSwissTime = () => {\n        const options = {\n            timeZone: 'Europe/Zurich',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false\n        };\n        setSwissTime(new Date().toLocaleTimeString('de-CH', options));\n    };\n\n    const handleGuess = () => {\n        if (gameOver || !letter) return;\n\n        const l = letter.toLowerCase();\n        setLetter('');\n\n        if (wrongGuesses.includes(l) || displayedWord.includes(l)) return;\n\n        if (selectedWord.includes(l)) {\n            const newDisplayed = displayedWord.map((char, i) => (\n                selectedWord[i] === l ? l : char\n            ));\n            setDisplayedWord(newDisplayed);\n\n            if (!newDisplayed.includes('_')) {\n                setGameOver(true);\n                setWins(wins + 1);\n                setPoints(points + 10);\n            }\n        } else {\n            const newTries = triesLeft - 1;\n            setWrongGuesses([...wrongGuesses, l]);\n            setTriesLeft(newTries);\n\n            if (newTries === 0) {\n                setGameOver(true);\n                setLosses(losses + 1);\n                setPoints(Math.max(0, points - 5));\n            }\n        }\n    };\n\n    const getImageSrc = () => {\n        const level = MAX_TRIES - triesLeft + 1;\n        return `/img/level${level}.png`;\n    };\n\n    return (\n        <div className=\"game-container\">\n            <div id=\"clock-container\">\n                <p className=\"swiss-time-label\">Swiss Time</p>\n                <p className=\"current-time\">{swissTime}</p>\n            </div>\n\n            <div id=\"score-display\">\n                <p id=\"total-points\" className=\"score-text\">Points: {points}</p>\n                <div id=\"win-loose-count\">\n                    <p id=\"win-count\" className=\"score-text\">{wins}</p>\n                    <p>/</p>\n                    <p id=\"loss-count\" className=\"score-text\">{losses}</p>\n                </div>\n            </div>\n\n            <h1>Hangman - Game</h1>\n            <div className=\"word-display\">{displayedWord.join(' ')}</div>\n\n            <div className=\"input-container\">\n                <label htmlFor=\"letter-input\">Enter a letter:</label>\n                <input\n                    type=\"text\"\n                    id=\"letter-input\"\n                    maxLength=\"1\"\n                    value={letter}\n                    onChange={(e) => setLetter(e.target.value)}\n                />\n                <button className=\"submit-btn\" onClick={handleGuess}>Guess</button>\n            </div>\n\n            <div className=\"wrong-guesses\">Wrong letters: {wrongGuesses.join(', ')}</div>\n\n            <div className=\"hangman-drawing\">\n                <img src={getImageSrc()} alt={`Hangman Level`} />\n            </div>\n\n            <div className=\"message\">\n                {gameOver ? (\n                    triesLeft === 0 ? `Lost! The word was: ${selectedWord}` : 'You won!'\n                ) : `Tries left: ${triesLeft}`}\n            </div>\n\n            <button className=\"restart-btn\" onClick={startGame}>Restart</button>\n        </div>\n    );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}