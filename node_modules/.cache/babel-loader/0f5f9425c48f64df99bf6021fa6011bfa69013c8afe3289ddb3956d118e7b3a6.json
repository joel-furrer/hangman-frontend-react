{"ast":null,"code":"var _jsxFileName = \"/home/joel/Playground/hangman-frontend/src/components/HangmanGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ScoreDisplay } from './ScoreDisplay';\nimport { SwissClock } from './SwissClock';\nimport { HangmanDrawing } from './HangmanDrawing';\nimport { GuessInput } from './GuessInput';\nimport { GameMessage } from './GameMessage';\nimport '../styles/HangmanGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_TRIES = 7;\nexport default function HangmanGame() {\n  _s();\n  const [words, setWords] = useState([]);\n  const [selectedWord, setSelectedWord] = useState('');\n  const [displayedWord, setDisplayedWord] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState([]);\n  const [triesLeft, setTriesLeft] = useState(MAX_TRIES);\n  const [wins, setWins] = useState(0);\n  const [losses, setLosses] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [letter, setLetter] = useState('');\n  const [swissTime, setSwissTime] = useState('');\n  const startGame = useCallback((wordArray = words) => {\n    const word = wordArray[Math.floor(Math.random() * wordArray.length)];\n    setSelectedWord(word);\n    setDisplayedWord(Array(word.length).fill('_'));\n    setWrongGuesses([]);\n    setTriesLeft(MAX_TRIES);\n    setGameOver(false);\n    setLetter('');\n  }, [words]);\n  useEffect(() => {\n    fetch('/word_list.txt').then(res => res.text()).then(data => {\n      const wordArray = data.split('\\n').map(w => w.trim().toLowerCase()).filter(Boolean);\n      setWords(wordArray);\n    }).catch(error => console.error(\"Error fetching word list:\", error));\n  }, []);\n  useEffect(() => {\n    if (words.length > 0) {\n      startGame(words);\n    }\n  }, [words, startGame]);\n  useEffect(() => {\n    const interval = setInterval(updateSwissTime, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const updateSwissTime = () => {\n    const options = {\n      timeZone: 'Europe/Zurich',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n    setSwissTime(new Date().toLocaleTimeString('de-CH', options));\n  };\n  const handleGuess = () => {\n    if (gameOver || !letter) return;\n    const l = letter.toLowerCase();\n    setLetter('');\n    if (wrongGuesses.includes(l) || displayedWord.includes(l)) return;\n    if (selectedWord.includes(l)) {\n      const newDisplayed = displayedWord.map((char, i) => selectedWord[i] === l ? l : char);\n      setDisplayedWord(newDisplayed);\n      if (!newDisplayed.includes('_')) {\n        setGameOver(true);\n        setWins(prevWins => prevWins + 1);\n        setPoints(prevPoints => prevPoints + 10);\n      }\n    } else {\n      const newTries = triesLeft - 1;\n      setWrongGuesses(prevGuesses => [...prevGuesses, l]);\n      setTriesLeft(newTries);\n      if (newTries === 0) {\n        setGameOver(true);\n        setLosses(prevLosses => prevLosses + 1);\n        setPoints(prevPoints => Math.max(0, prevPoints - 5));\n      }\n    }\n  };\n  const getImageSrc = () => {\n    const level = MAX_TRIES - triesLeft + 1;\n    return `/img/level${level}.png`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hangman-game\",\n    children: [/*#__PURE__*/_jsxDEV(SwissClock, {\n      swissTime: swissTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n      wins: wins,\n      losses: losses,\n      points: points\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"hangman-game__title\",\n      children: \"Hangman - Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-game__word-display\",\n      children: displayedWord.join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n      letter: letter,\n      setLetter: setLetter,\n      handleGuess: handleGuess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman-game__wrong-guesses\",\n      children: [\"Wrong letters: \", wrongGuesses.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HangmanDrawing, {\n      imageSrc: getImageSrc()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      gameOver: gameOver,\n      triesLeft: triesLeft,\n      selectedWord: selectedWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"hangman-game__restart-btn\",\n      onClick: () => startGame(words),\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(HangmanGame, \"sKPx1dVJmmhxiVQ70kt12nOXHoo=\");\n_c = HangmanGame;\nvar _c;\n$RefreshReg$(_c, \"HangmanGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ScoreDisplay","SwissClock","HangmanDrawing","GuessInput","GameMessage","jsxDEV","_jsxDEV","MAX_TRIES","HangmanGame","_s","words","setWords","selectedWord","setSelectedWord","displayedWord","setDisplayedWord","wrongGuesses","setWrongGuesses","triesLeft","setTriesLeft","wins","setWins","losses","setLosses","points","setPoints","gameOver","setGameOver","letter","setLetter","swissTime","setSwissTime","startGame","wordArray","word","Math","floor","random","length","Array","fill","fetch","then","res","text","data","split","map","w","trim","toLowerCase","filter","Boolean","catch","error","console","interval","setInterval","updateSwissTime","clearInterval","options","timeZone","hour","minute","second","hour12","Date","toLocaleTimeString","handleGuess","l","includes","newDisplayed","char","i","prevWins","prevPoints","newTries","prevGuesses","prevLosses","max","getImageSrc","level","className","children","fileName","_jsxFileName","lineNumber","columnNumber","join","imageSrc","onClick","_c","$RefreshReg$"],"sources":["/home/joel/Playground/hangman-frontend/src/components/HangmanGame.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ScoreDisplay } from './ScoreDisplay';\nimport { SwissClock } from './SwissClock';\nimport { HangmanDrawing } from './HangmanDrawing';\nimport { GuessInput } from './GuessInput';\nimport { GameMessage } from './GameMessage';\nimport '../styles/HangmanGame.css';\n\nconst MAX_TRIES = 7;\n\nexport default function HangmanGame() {\n    const [words, setWords] = useState([]);\n    const [selectedWord, setSelectedWord] = useState('');\n    const [displayedWord, setDisplayedWord] = useState([]);\n    const [wrongGuesses, setWrongGuesses] = useState([]);\n    const [triesLeft, setTriesLeft] = useState(MAX_TRIES);\n    const [wins, setWins] = useState(0);\n    const [losses, setLosses] = useState(0);\n    const [points, setPoints] = useState(0);\n    const [gameOver, setGameOver] = useState(false);\n    const [letter, setLetter] = useState('');\n    const [swissTime, setSwissTime] = useState('');\n\n    const startGame = useCallback((wordArray = words) => {\n        const word = wordArray[Math.floor(Math.random() * wordArray.length)];\n        setSelectedWord(word);\n        setDisplayedWord(Array(word.length).fill('_'));\n        setWrongGuesses([]);\n        setTriesLeft(MAX_TRIES);\n        setGameOver(false);\n        setLetter('');\n    }, [words]);\n\n    useEffect(() => {\n        fetch('/word_list.txt')\n            .then((res) => res.text())\n            .then((data) => {\n                const wordArray = data.split('\\n').map((w) => w.trim().toLowerCase()).filter(Boolean);\n                setWords(wordArray);\n            })\n            .catch((error) => console.error(\"Error fetching word list:\", error));\n    }, []);\n\n    useEffect(() => {\n        if (words.length > 0) {\n            startGame(words);\n        }\n    }, [words, startGame]);\n\n    useEffect(() => {\n        const interval = setInterval(updateSwissTime, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const updateSwissTime = () => {\n        const options = {\n            timeZone: 'Europe/Zurich',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n        };\n        setSwissTime(new Date().toLocaleTimeString('de-CH', options));\n    };\n\n    const handleGuess = () => {\n        if (gameOver || !letter) return;\n\n        const l = letter.toLowerCase();\n        setLetter('');\n\n        if (wrongGuesses.includes(l) || displayedWord.includes(l)) return;\n\n        if (selectedWord.includes(l)) {\n            const newDisplayed = displayedWord.map((char, i) =>\n                selectedWord[i] === l ? l : char\n            );\n            setDisplayedWord(newDisplayed);\n\n            if (!newDisplayed.includes('_')) {\n                setGameOver(true);\n                setWins((prevWins) => prevWins + 1);\n                setPoints((prevPoints) => prevPoints + 10);\n            }\n        } else {\n            const newTries = triesLeft - 1;\n            setWrongGuesses((prevGuesses) => [...prevGuesses, l]);\n            setTriesLeft(newTries);\n\n            if (newTries === 0) {\n                setGameOver(true);\n                setLosses((prevLosses) => prevLosses + 1);\n                setPoints((prevPoints) => Math.max(0, prevPoints - 5));\n            }\n        }\n    };\n\n    const getImageSrc = () => {\n        const level = MAX_TRIES - triesLeft + 1;\n        return `/img/level${level}.png`;\n    };\n\n    return (\n        <div className=\"hangman-game\">\n            <SwissClock swissTime={swissTime} />\n            <ScoreDisplay wins={wins} losses={losses} points={points} />\n            <h1 className=\"hangman-game__title\">Hangman - Game</h1>\n            <div className=\"hangman-game__word-display\">{displayedWord.join(' ')}</div>\n            <GuessInput letter={letter} setLetter={setLetter} handleGuess={handleGuess} />\n            <div className=\"hangman-game__wrong-guesses\">\n                Wrong letters: {wrongGuesses.join(', ')}\n            </div>\n            <HangmanDrawing imageSrc={getImageSrc()} />\n            <GameMessage gameOver={gameOver} triesLeft={triesLeft} selectedWord={selectedWord} />\n            <button className=\"hangman-game__restart-btn\" onClick={() => startGame(words)}>\n                Restart\n            </button>\n        </div>\n    );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,eAAe;AAC3C,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,SAAS,GAAG,CAAC;AAEnB,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAACU,SAAS,CAAC;EACrD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACyB,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAAC2B,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC+B,MAAM,EAAEC,SAAS,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMmC,SAAS,GAAGjC,WAAW,CAAC,CAACkC,SAAS,GAAGvB,KAAK,KAAK;IACjD,MAAMwB,IAAI,GAAGD,SAAS,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,SAAS,CAACK,MAAM,CAAC,CAAC;IACpEzB,eAAe,CAACqB,IAAI,CAAC;IACrBnB,gBAAgB,CAACwB,KAAK,CAACL,IAAI,CAACI,MAAM,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9CvB,eAAe,CAAC,EAAE,CAAC;IACnBE,YAAY,CAACZ,SAAS,CAAC;IACvBoB,WAAW,CAAC,KAAK,CAAC;IAClBE,SAAS,CAAC,EAAE,CAAC;EACjB,CAAC,EAAE,CAACnB,KAAK,CAAC,CAAC;EAEXZ,SAAS,CAAC,MAAM;IACZ2C,KAAK,CAAC,gBAAgB,CAAC,CAClBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACZ,MAAMZ,SAAS,GAAGY,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;MACrFzC,QAAQ,CAACsB,SAAS,CAAC;IACvB,CAAC,CAAC,CACDoB,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;EAC5E,CAAC,EAAE,EAAE,CAAC;EAENxD,SAAS,CAAC,MAAM;IACZ,IAAIY,KAAK,CAAC4B,MAAM,GAAG,CAAC,EAAE;MAClBN,SAAS,CAACtB,KAAK,CAAC;IACpB;EACJ,CAAC,EAAE,CAACA,KAAK,EAAEsB,SAAS,CAAC,CAAC;EAEtBlC,SAAS,CAAC,MAAM;IACZ,MAAM0D,QAAQ,GAAGC,WAAW,CAACC,eAAe,EAAE,IAAI,CAAC;IACnD,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAME,OAAO,GAAG;MACZC,QAAQ,EAAE,eAAe;MACzBC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACZ,CAAC;IACDlC,YAAY,CAAC,IAAImC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAEP,OAAO,CAAC,CAAC;EACjE,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAI1C,QAAQ,IAAI,CAACE,MAAM,EAAE;IAEzB,MAAMyC,CAAC,GAAGzC,MAAM,CAACsB,WAAW,CAAC,CAAC;IAC9BrB,SAAS,CAAC,EAAE,CAAC;IAEb,IAAIb,YAAY,CAACsD,QAAQ,CAACD,CAAC,CAAC,IAAIvD,aAAa,CAACwD,QAAQ,CAACD,CAAC,CAAC,EAAE;IAE3D,IAAIzD,YAAY,CAAC0D,QAAQ,CAACD,CAAC,CAAC,EAAE;MAC1B,MAAME,YAAY,GAAGzD,aAAa,CAACiC,GAAG,CAAC,CAACyB,IAAI,EAAEC,CAAC,KAC3C7D,YAAY,CAAC6D,CAAC,CAAC,KAAKJ,CAAC,GAAGA,CAAC,GAAGG,IAChC,CAAC;MACDzD,gBAAgB,CAACwD,YAAY,CAAC;MAE9B,IAAI,CAACA,YAAY,CAACD,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B3C,WAAW,CAAC,IAAI,CAAC;QACjBN,OAAO,CAAEqD,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;QACnCjD,SAAS,CAAEkD,UAAU,IAAKA,UAAU,GAAG,EAAE,CAAC;MAC9C;IACJ,CAAC,MAAM;MACH,MAAMC,QAAQ,GAAG1D,SAAS,GAAG,CAAC;MAC9BD,eAAe,CAAE4D,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAER,CAAC,CAAC,CAAC;MACrDlD,YAAY,CAACyD,QAAQ,CAAC;MAEtB,IAAIA,QAAQ,KAAK,CAAC,EAAE;QAChBjD,WAAW,CAAC,IAAI,CAAC;QACjBJ,SAAS,CAAEuD,UAAU,IAAKA,UAAU,GAAG,CAAC,CAAC;QACzCrD,SAAS,CAAEkD,UAAU,IAAKxC,IAAI,CAAC4C,GAAG,CAAC,CAAC,EAAEJ,UAAU,GAAG,CAAC,CAAC,CAAC;MAC1D;IACJ;EACJ,CAAC;EAED,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,KAAK,GAAG1E,SAAS,GAAGW,SAAS,GAAG,CAAC;IACvC,OAAO,aAAa+D,KAAK,MAAM;EACnC,CAAC;EAED,oBACI3E,OAAA;IAAK4E,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACzB7E,OAAA,CAACL,UAAU;MAAC6B,SAAS,EAAEA;IAAU;MAAAsD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpCjF,OAAA,CAACN,YAAY;MAACoB,IAAI,EAAEA,IAAK;MAACE,MAAM,EAAEA,MAAO;MAACE,MAAM,EAAEA;IAAO;MAAA4D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5DjF,OAAA;MAAI4E,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvDjF,OAAA;MAAK4E,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAErE,aAAa,CAAC0E,IAAI,CAAC,GAAG;IAAC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3EjF,OAAA,CAACH,UAAU;MAACyB,MAAM,EAAEA,MAAO;MAACC,SAAS,EAAEA,SAAU;MAACuC,WAAW,EAAEA;IAAY;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9EjF,OAAA;MAAK4E,SAAS,EAAC,6BAA6B;MAAAC,QAAA,GAAC,iBAC1B,EAACnE,YAAY,CAACwE,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACNjF,OAAA,CAACJ,cAAc;MAACuF,QAAQ,EAAET,WAAW,CAAC;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3CjF,OAAA,CAACF,WAAW;MAACsB,QAAQ,EAAEA,QAAS;MAACR,SAAS,EAAEA,SAAU;MAACN,YAAY,EAAEA;IAAa;MAAAwE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrFjF,OAAA;MAAQ4E,SAAS,EAAC,2BAA2B;MAACQ,OAAO,EAAEA,CAAA,KAAM1D,SAAS,CAACtB,KAAK,CAAE;MAAAyE,QAAA,EAAC;IAE/E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAAC9E,EAAA,CA7GuBD,WAAW;AAAAmF,EAAA,GAAXnF,WAAW;AAAA,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}